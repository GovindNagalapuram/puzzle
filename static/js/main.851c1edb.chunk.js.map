{"version":3,"sources":["components/block.js","components/row.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Block","blockValue","color","value","className","Row","row","map","cell","i","key","Main","state","board","score","gameOver","message","startBoard","placeRandom","setState","getBlankCoordinates","blankCoordinates","r","length","j","push","randomStartingNumber","startingNumber","Math","floor","random","randomCoordinate","randomNumber","boardMoved","original","updated","JSON","stringify","move","direction","movedUp","moveUp","upWithRandom","onGameOver","movedRight","moveRight","rightWithRandom","movedDown","moveDown","downWithRandom","movedLeft","moveLeft","leftWithRandom","inputBoard","rotatedRight","rotateRight","c","current","unshift","rotateLeft","matrix","result","includes","onKeyPress","e","keyCode","this","document","querySelector","addEventListener","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.851c1edb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Block = ({ blockValue }) => {\r\n  let color = 'cell';\r\n  let value = (blockValue === 0) ? '' : blockValue;\r\n  if (value) {\r\n    color += ` color-${value}`;\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n        <div className={color}>\r\n            <div className=\"number\">{value}</div>\r\n      </div>\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default Block;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport Block from './block'\r\n\r\nconst Row = ({ row }) => {\r\n  return (\r\n    <div className=\"game_row\">\r\n        {row.map((cell, i) => (<Block key={i} blockValue={cell} />))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Row;","import React, { Component } from 'react';\r\nimport Row from './row';\r\n\r\nclass Main extends Component{\r\n\r\n    state = {\r\n        board: null,\r\n        score: 0,\r\n        gameOver: false,\r\n        message: null\r\n    };\r\n\r\n    // Create board with one random coordinate numbers\r\n    startBoard = () => {\r\n        let board = [\r\n                [0,0,0,0],\r\n                [0,0,0,0],\r\n                [0,0,0,0],\r\n                [0,0,0,0]\r\n            ];\r\n        // board = this.placeRandom(this.placeRandom(board));\r\n        board = (this.placeRandom(board));\r\n        this.setState({\r\n                board, \r\n                score: 0, \r\n                gameOver: false, \r\n                message: null\r\n            });\r\n    }\r\n          \r\n    // Get all blank coordinates from board\r\n    getBlankCoordinates = (board) => {\r\n        const blankCoordinates = [];\r\n        \r\n        // iterate through each row in the array\r\n        for (let r = 0; r < board.length; r++) {\r\n            // iterate through each each item in a row\r\n            for (let j = 0; j < board[r].length; j++) {\r\n                if (board[r][j] === 0) {blankCoordinates.push([r, j])}\r\n            }\r\n        }\r\n                \r\n        return blankCoordinates;\r\n    }\r\n          \r\n    //to get the start number\r\n    randomStartingNumber = ()  => {\r\n        const startingNumber = [2];\r\n        const randomNumber = startingNumber[Math.floor(Math.random() * startingNumber.length)];\r\n        return randomNumber;\r\n    }\r\n          \r\n    // Place random starting number on an empty coordinate\r\n    placeRandom = (board) => {\r\n        const blankCoordinates = this.getBlankCoordinates(board);\r\n        const randomCoordinate = blankCoordinates[Math.floor(Math.random() * blankCoordinates.length)];\r\n        const randomNumber = this.randomStartingNumber();\r\n        board[randomCoordinate[0]][randomCoordinate[1]] = randomNumber;\r\n        return board;\r\n    }\r\n          \r\n    // Compares two boards to check for movement\r\n    boardMoved = (original, updated) => {\r\n        return (JSON.stringify(updated) !== JSON.stringify(original)) ? true : false;\r\n    }\r\n          \r\n    // Moves board depending on direction and checks for game over\r\n    move = (direction) => {\r\n        if (!this.state.gameOver) {\r\n            if (direction === 'up') {\r\n                const movedUp = this.moveUp(this.state.board);\r\n                if (this.boardMoved(this.state.board, movedUp.board)) {\r\n                    const upWithRandom = this.placeRandom(movedUp.board);\r\n                    \r\n                    if (this.onGameOver(upWithRandom)) {\r\n                        this.setState({\r\n                                board: upWithRandom, \r\n                                gameOver: true,\r\n                                message: 'Game over!'\r\n                            });\r\n                    } else {\r\n                        this.setState({\r\n                                board: upWithRandom, \r\n                                score: this.state.score += movedUp.score\r\n                            });  \r\n                    }\r\n                }\r\n            } else if (direction === 'right') {\r\n                const movedRight = this.moveRight(this.state.board);\r\n                if (this.boardMoved(this.state.board, movedRight.board)) {\r\n                    const rightWithRandom = this.placeRandom(movedRight.board);\r\n                    \r\n                    if (this.onGameOver(rightWithRandom)) {\r\n                        this.setState({\r\n                                board: rightWithRandom, \r\n                                gameOver: true, \r\n                                message: 'Game over!'\r\n                            });\r\n                    } else {\r\n                        this.setState({\r\n                                board: rightWithRandom, \r\n                                score: this.state.score += movedRight.score\r\n                            });  \r\n                    }\r\n                }\r\n            } else if (direction === 'down') {\r\n                const movedDown = this.moveDown(this.state.board);\r\n                if (this.boardMoved(this.state.board, movedDown.board)) {\r\n                    const downWithRandom = this.placeRandom(movedDown.board);\r\n                    \r\n                    if (this.onGameOver(downWithRandom)) {\r\n                        this.setState({\r\n                                board: downWithRandom, \r\n                                gameOver: true, \r\n                                message: 'Game over!'\r\n                            });\r\n                    } else {\r\n                        this.setState({\r\n                                board: downWithRandom, \r\n                                score: this.state.score += movedDown.score\r\n                            });\r\n                    }\r\n                }\r\n            } else if (direction === 'left') {\r\n                const movedLeft = this.moveLeft(this.state.board);\r\n                if (this.boardMoved(this.state.board, movedLeft.board)) {\r\n                    const leftWithRandom = this.placeRandom(movedLeft.board);\r\n                    \r\n                    if (this.onGameOver(leftWithRandom)) {\r\n                        this.setState({\r\n                                board: leftWithRandom, \r\n                                gameOver: true, \r\n                                message: 'Game over!'\r\n                            });  \r\n                    } else {\r\n                        this.setState({\r\n                                board: leftWithRandom, \r\n                                score: this.state.score += movedLeft.score\r\n                            });\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.setState({\r\n                    message: 'Game over. Please start a new game.'\r\n                });\r\n        }\r\n    }\r\n      \r\n    // on key up the numbers will move using moveup function\r\n    moveUp = (inputBoard) => {\r\n        let rotatedRight = this.rotateRight(inputBoard);\r\n        let board = [];\r\n        let score = 0;\r\n\r\n        // Shift all numbers to the right\r\n        for (let r = 0; r < rotatedRight.length; r++) {\r\n            let row = [];\r\n            for (let c = 0; c < rotatedRight[r].length; c++) {\r\n            let current = rotatedRight[r][c];\r\n            (current === 0) ? row.unshift(current) : row.push(current);\r\n            }\r\n            board.push(row);\r\n        }\r\n\r\n        // Combine numbers and shift to right\r\n        for (let r = 0; r < board.length; r++) {\r\n            for (let c = board[r].length - 1; c >= 0; c--) {\r\n            if (board[r][c] > 0 && board[r][c] === board[r][c - 1]) {\r\n                board[r][c] = board[r][c] * 2;\r\n                board[r][c - 1] = 0;\r\n                score += board[r][c];\r\n            } else if (board[r][c] === 0 && board[r][c - 1] > 0) {\r\n                board[r][c] = board[r][c - 1];\r\n                board[r][c - 1] = 0;\r\n            }\r\n            }\r\n        }\r\n\r\n        // Rotate board back upright\r\n        board = this.rotateLeft(board);\r\n\r\n        return {board, score};\r\n    }\r\n     \r\n    // on key down the numbers will move using movedown function\r\n    moveDown = (inputBoard) => {\r\n        let rotatedRight = this.rotateRight(inputBoard);\r\n        let board = [];\r\n        let score = 0;\r\n\r\n        // Shift all numbers to the left\r\n        for (let r = 0; r < rotatedRight.length; r++) {\r\n            let row = [];      \r\n            for (let c = rotatedRight[r].length - 1; c >= 0; c--) {\r\n            let current = rotatedRight[r][c];\r\n            (current === 0) ? row.push(current) : row.unshift(current);\r\n            }\r\n            board.push(row);\r\n        }\r\n\r\n        // Combine numbers and shift to left\r\n        for (let r = 0; r < board.length; r++) {\r\n            for (let c = 0; c < board.length; c++) {\r\n            if (board[r][c] > 0 && board[r][c] === board[r][c + 1]) {\r\n                board[r][c] = board[r][c] * 2;\r\n                board[r][c + 1] = 0;\r\n                score += board[r][c];\r\n            } else if (board[r][c] === 0 && board[r][c + 1] > 0) {\r\n                board[r][c] = board[r][c + 1];\r\n                board[r][c + 1] = 0;\r\n            }\r\n            }\r\n        }\r\n\r\n        // Rotate board back upright\r\n        board = this.rotateLeft(board);\r\n\r\n        return {board, score};\r\n    }\r\n\r\n    // on key right the numbers will move using moveright function\r\n    moveRight =(inputBoard) => {\r\n        let board = [];\r\n        let score = 0;\r\n\r\n        // Shift all numbers to the right\r\n        for (let r = 0; r < inputBoard.length; r++) {\r\n            let row = [];      \r\n            for (let c = 0; c < inputBoard[r].length; c++) {\r\n            let current = inputBoard[r][c];\r\n            (current === 0) ? row.unshift(current) : row.push(current);\r\n            }\r\n            board.push(row);\r\n        }\r\n\r\n        // Combine numbers and shift to right\r\n        for (let r = 0; r < board.length; r++) {\r\n            for (let c = board[r].length - 1; c >= 0; c--) {\r\n            if (board[r][c] > 0 && board[r][c] === board[r][c - 1]) {\r\n                board[r][c] = board[r][c] * 2;\r\n                board[r][c - 1] = 0;\r\n                score += board[r][c];\r\n            } else if (board[r][c] === 0 && board[r][c - 1] > 0) {\r\n                board[r][c] = board[r][c - 1];\r\n                board[r][c - 1] = 0;\r\n            }\r\n            }\r\n        }\r\n\r\n        return {board, score};\r\n    }\r\n       \r\n    // on key left the numbers will move using moveleft function\r\n    moveLeft = (inputBoard) => {\r\n        let board = [];\r\n        let score = 0;\r\n    \r\n        // Shift all numbers to the left\r\n        for (let r = 0; r < inputBoard.length; r++) {\r\n        let row = [];      \r\n        for (let c = inputBoard[r].length - 1; c >= 0; c--) {\r\n            let current = inputBoard[r][c];\r\n            (current === 0) ? row.push(current) : row.unshift(current);\r\n        }\r\n        board.push(row);\r\n        }\r\n    \r\n        // Combine numbers and shift to left\r\n        for (let r = 0; r < board.length; r++) {\r\n            for (let c = 0; c < board.length; c++) {\r\n                if (board[r][c] > 0 && board[r][c] === board[r][c + 1]) {\r\n                board[r][c] = board[r][c] * 2;\r\n                board[r][c + 1] = 0;\r\n                score += board[r][c];\r\n                } else if (board[r][c] === 0 && board[r][c + 1] > 0) {\r\n                board[r][c] = board[r][c + 1];\r\n                board[r][c + 1] = 0;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return {board, score};\r\n    }\r\n          \r\n    rotateRight =(matrix) =>{\r\n    let result = [];\r\n    \r\n        for (let c = 0; c < matrix.length; c++) {\r\n            let row = [];\r\n            for (let r = matrix.length - 1; r >= 0; r--) {\r\n                row.push(matrix[r][c]);\r\n            }\r\n        result.push(row);\r\n        }\r\n    \r\n        return result;\r\n    }\r\n    \r\n    rotateLeft = (matrix) => {\r\n        let result = [];\r\n\r\n        for (let c = matrix.length - 1; c >= 0; c--) {\r\n            let row = [];\r\n            for (let r = matrix.length - 1; r >= 0; r--) {\r\n            row.unshift(matrix[r][c]);\r\n            }\r\n            result.push(row);\r\n        }\r\n\r\n        return result;\r\n    }\r\n          \r\n    // to check if there are any random moves left on the board\r\n    onGameOver = (board)  => {\r\n        let moves = [\r\n            this.boardMoved(board, this.moveUp(board).board),\r\n            this.boardMoved(board, this.moveRight(board).board),\r\n            this.boardMoved(board, this.moveDown(board).board),\r\n            this.boardMoved(board, this.moveLeft(board).board)\r\n        ];\r\n        \r\n        return (moves.includes(true)) ? false : true;\r\n    }\r\n          \r\n    componentWillMount() {\r\n        this.startBoard();  \r\n        const body = document.querySelector('body');\r\n        body.addEventListener('keydown', this.onKeyPress);\r\n    }\r\n          \r\n    onKeyPress = (e) => {\r\n        const up = 38;\r\n        const right = 39;\r\n        const down = 40;\r\n        const left = 37\r\n        const n = 78;\r\n        \r\n        if (e.keyCode === up) {\r\n            this.move('up');\r\n        } else if (e.keyCode === right) {\r\n            this.move('right');\r\n        } else if (e.keyCode === down) {\r\n            this.move('down');\r\n        } else if (e.keyCode === left) {\r\n            this.move('left');\r\n        } else if (e.keyCode === n) {\r\n            this.startBoard();\r\n        }\r\n    }\r\n            \r\n\r\n    render() {\r\n        return (\r\n        <div className=\"main\">  \r\n            \r\n            <div className=\"score\">Score: {this.state.score}</div>\r\n\r\n            <div className=\"game_board\">\r\n                <div className=\"game_container\">\r\n                    {this.state.board.map((row, i) => (<Row key={i} row={row} />))}\r\n                </div>\r\n            </div>\r\n                 \r\n            <div className=\"button\" onClick={() => {this.startBoard()}}>New Game</div>\r\n            <p>{this.state.message}</p>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport Main from './components/main'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}